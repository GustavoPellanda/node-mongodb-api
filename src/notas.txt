Criando uma API com MongoDB:

1 - Instalar MongoDB e Mongoose com o npm

2- Criar o banco de dados. Nesse caso será utilizado o Atlas.
Usar a chave de conexão para se conectar ao banco criado.
Utilizar dotenv para salvar a chave de conexão com a senha.

import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config();

async function connectsToDatabase() {
  const connectionString = process.env.MONGODB_URI;
  mongoose.connect(connectionString);
  return mongoose.connection;
}

export default connectsToDatabase;

Chamar a função criada para a conexão no início do código do servidor

3 - Criar um Schema para definir as propriedades dos documentos que serão salvos no BD:

import mongoose from "mongoose";

const burguerSchema = new mongoose.Schema ({
    id: { type: mongoose.Schema.Types.ObjectId },
    name: { type: String, required: true },
    description: { type: String },
    ingredients: { type: String },
    spicinessLevel: { type: Number }, 
    price: { type: Number }
}, { versionKey: false });

const burger = mongoose.model("burguers", burguerSchema);
export default burger;

4 - Criar uma classe controller para gerenciar as requisições ao banco de dados

import burger from "../models/Burger.js";

class burgerController {
    
    static async listsAllBurgers (req, res){
        const cheeseburgers = await burger.find({});
        res.status(200).json(cheeseburgers);
    }

    static async registersNewBurger (req, res){
        try {
            const newBurger = await burger.create(req.body);
            res.status(201).json({message: "Burger received!", burger: newBurger});
        } catch (error){
            res.status(500).json({ message: "Error registering burguer.", error: error.message });
        }
    }

};

export default burgerController;

nomeDoSchema.find
nomeDoSchema.create

5 - Criar um roteador para as rotas

import express from "express";
import burgerController from "../controllers/burgerController.js";

const routes = express.Router();

routes.get("/cheeseburgers", burgerController.listsAllBurgers);
routes.get("/cheeseburgers/:id", burgerController.listsBurgerById);
routes.post("/cheeseburgers", burgerController.registersNewBurger);
routes.patch("/cheeseburgers/:id", burgerController.updatesBurger);
routes.delete("/cheeseburgers/:id", burgerController.deletesBurger);

export default routes;

6 - Criar um index para o router


7 - Criar um app.js

import express from "express";
import connectsToDatabase from "./config/dbConnect.js";
import routes from "./routes/index.js";

const dbConnection = await connectsToDatabase();
const app = express();
routes(app);

8 - Criar um server.js

import app from "./src/app.js";

const PORT = 3000;

app.listen(PORT, () => {
    console.log("Server listening on port 3000...");
});